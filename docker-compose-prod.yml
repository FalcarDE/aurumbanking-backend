########################################################
# Volume Definition
########################################################
volumes:
  customer-information-service-db-data:
  depot-service-db-data:
  support-service-db-data:
  transaction-service-db-data:

services:
  ########################################################
  # Reverse Proxy / Traefik
  ########################################################
  gateway:
    image: "traefik:v2.10"
    # Enables the web UI and tells Traefik to listen to docker
    command:
      --api.insecure=true
      --providers.docker
    ports:
      # HTTP Port
      - "80:80"
      # WEB UI Port
      - "8080:8080"

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./config:/etc/traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`) && (PathPrefix(`/api`, `/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"

  ########################################################
  # Messaging/Kafka
  ########################################################
  zookeeper:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  ########################################################
  #  Customer Information Postgres DB
  ########################################################
  customer-information-service-db:
    image: postgres
    restart: always
    volumes:
      # Use the named volume to store DB data
      - customer-information-service-db-data:/var/lib/postgresql/data
      # Init Database with Data when Docker started
      #- /init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      # We expose the port so that one can connect directly to this
      # DB using `localhost:5432` from your IDE or some other tool
      - "5432:5432"
    environment:
      # PostgreSQL settings - should be used in your database connection
      # config in `application.properties` from Quarkus
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database

  ########################################################
  # Depot Service Postgres DB
  ########################################################
  depot-service-db:
    image: postgres
    restart: always
    volumes:
      # Use the named volume to store DB data
      - depot-service-db-data:/var/lib/postgresql/data
    ports:
      # We expose the port so that one can connect directly to this
      # DB using `localhost:5432` from your IDE or some other tool
      - "5433:5432"
    environment:
      # PostgreSQL settings - should be used in your database connection
      # config in `application.properties` from Quarkus
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database

  ########################################################
  # Transaction Service Postgres DB
  ########################################################
  transaction-service-db:
    image: postgres
    restart: always
    volumes:
      # Use the named volume to store DB data
      - transaction-service-db-data:/var/lib/postgresql/data
    ports:
      # We expose the port so that one can connect directly to this
      # DB using `localhost:5432` from your IDE or some other tool
      - "5435:5432"
    environment:
      # PostgreSQL settings - should be used in your database connection
      # config in `application.properties` from Quarkus
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database

  ########################################################
  # Support Service Postgres DB
  ########################################################
  support-service-db:
    image: postgres
    restart: always
    volumes:
      # Use the named volume to store DB data
      - support-service-db-data:/var/lib/postgresql/data
    ports:
      # We expose the port so that one can connect directly to this
      # DB using `localhost:5433` from your IDE or some other tool
      - "5434:5432"
    environment:
      # PostgreSQL settings - should be used in your database connection
      # config in `application.properties` from Quarkus
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database

  ########################################################
  # Customer Information API-Gateway
  ########################################################
  customer-information-service:
    build:
      context: ./customer-information-service
      dockerfile: ./src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.customer-information-service.rule=PathPrefix(`/customer-information-service`)"
      - "traefik.http.services.customer-information-service.loadbalancer.server.port=8080"
    depends_on:
      - gateway
      - customer-information-service-db


  ########################################################
  # Support Service API-Gateway
  ########################################################
  support-service:
    build:
      context: ./support-service
      dockerfile: ./src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.support-service.rule=PathPrefix(`/support-service`)"
      - "traefik.http.services.support-service.loadbalancer.server.port=8080"
    depends_on:
      - gateway
      - support-service-db

  ########################################################
  # Depot Service API-Gateway
  ########################################################
  depot-service:
    build:
      context: ./depot-service
      dockerfile: ./src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.depot-service.rule=PathPrefix(`/depot-service`)"
      - "traefik.http.services.depot-service.loadbalancer.server.port=8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      - gateway
      - depot-service-db
      - kafka
      - transaction-service


  ########################################################
  # Transaction Service API-Gateway
  ########################################################
  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: ./src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transaction-service.rule=PathPrefix(`/transactions-service`)"
      - "traefik.http.services.transaction-service.loadbalancer.server.port=8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      - gateway
      - transaction-service-db
      - kafka

  ########################################################
  # Login Service API-Gateway
  ########################################################
  login-service:
    build:
      context: ./login-service
      dockerfile: ./src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.login-service.rule=PathPrefix(`/login-service`)"
      - "traefik.http.services.login-service.loadbalancer.server.port=8080"
    depends_on:
      - gateway
      - customer-information-service-db


